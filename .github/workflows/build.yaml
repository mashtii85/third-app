name: Build

on:
  push:
    branches:
      - SS-Publish
    tags:
      - release*
  # push:
    # tags:
    #   - v*
jobs:
  build:
    name: Build Libraries
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.CI_REPOSITORY_ACCESS_TOKEN }}




      #     # git push

      # - name: Get the two latest versions
      #   run: |
          # CURRENT_VERSION=$(git tag -l "v*" --sort=-version:refname | head -n 1)
          # LAST_VERSION=$(git tag -l "v*" --sort=-version:refname | head -n 2 | awk 'NR == 2 { print $1 }')
          # echo "current_version=$(echo $CURRENT_VERSION)" >> $GITHUB_ENV
          # echo "last_version=$(echo $LAST_VERSION)" >> $GITHUB_ENV
      - name: Setup NodeJS 14
        uses: actions/setup-node@v1
        with:
          node-version: 14

      - name: Install yarn
        run: npm install -g yarn

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"

      - name: Cache yarn dependencies
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            **\node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install

      # - name: Build libraries
      #   run: |
      #     # yarn nx affected:libs --target=build --prod --skip-nx-cache #--base=origin/develop --head=HEAD
      #     yarn nx affected:build --prod --base=origin/develop~1 --head=origin/develop

      # - name: Build
      #   run: |
      #       yarn nx build nest-utils
    #  - name: Build Artifacts
    #    run: |
    #       cd ./dist/libs/nest-utils
    #       npm pack
    #       echo github.repository_owner
      - name: Build Library
        run: |
          yarn nx affected --target=build --prod --skip-nx-cache --head=HEAD --base=origin/develop

      - name: Affected Builds
        env:
          command: yarn nx affected:libs --target=build --base=origin/develop --head=HEAD --plain
        run: |
          ${{ env.command }}
          echo '::set-output name=AFFECTED_LIBS::${{ env.command }}'
        id: affected-builds

      - name: Build package (Github packages)

        run: |
          echo 'libs=> ${{ steps.affected-builds.outputs.AFFECTED_LIBS }}'
          LIBS=$(${{ steps.affected-builds.outputs.AFFECTED_LIBS }} | awk 'NR > 2 && $1 != "Done" { print $1 }')

          for LIBRARY in $LIBS
          do
            if [[ -d ./dist/libs/$LIBRARY ]]; then
              cd ./libs/$LIBRARY
              npm version minor --no-git-tag-version --no-push --yes


              cd ..
              cd ..
              cd ./dist/libs/$LIBRARY
              # npm publish --registry https://npm.pkg.github.com --no-git-tag-version --no-push --yes
              echo "lib name:$LIBRARY"
              echo 'from loop {{ $LIBRARY }}'
              # npm pack

              cd ..
              cd ..

            fi
          done
          npm version minor --no-git-tag-version --no-push --yes

      # - name: Create Artifacts
      #   uses: actions/upload-artifact@v2
      #   with:
      #       name: package
      #       path: dist
      # - name: get-npm-version
      #   id: package-version
      #   uses: martinbeentjes/npm-get-version-action@master

      # - name: Get changed files
      #   id: changed-files
      #   uses: tj-actions/changed-files@v14.6
      #   with:
      #     files: |
      #       **/*.ts
      #       **/*.tsx
      #       **/*.js
      #       **/*.jsx

      # - name: List all changed files
      #   run: |
      #     for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
      #       echo "$file was changed"
      #     done


      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@master

      - name: Push changes
        run: |
          # date +%s > report.txt

          echo ${{ steps.package-version.outputs.current-version }}
          git pull
          git fetch
          # git checkout -b temp
          git config --global user.email "forlorn_1985@rocketmail.com"
          git config --global user.name "DryKiss"
          # git checkout -b kh-publish
          git add --all
          git commit -am "update versions to ${{ steps.package-version.outputs.current-version }} tag publish v${{ steps.package-version.outputs.current-version }}"
          git push --follow-tags

  # publish:
  #   needs: [build]
  #   runs-on: ubuntu-18.04
  #   if: github.repository_owner == 'DryKISS'
  #   steps:
  #     - name: Upload
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: package
  #     - uses: actions/setup-node@v1
  #       with:
  #         node-version: 14.x
  #         registry-url: https://npm.pkg.github.com/
  #         scope: '@DryKISS'
  #     - run: echo "registry=https://npm.pkg.github.com/@DryKISS" >> .npmrc
  #     - run: npm publish $(ls *.tgz)
  #       env:
  #         NODE_AUTH_TOKEN: ${{secrets.CI_REPOSITORY_ACCESS_TOKEN}}

